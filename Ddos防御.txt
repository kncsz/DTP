==================================================================
ICMP Flood
==================================================================




==================================================================
SYN  Flood
### **什么是 SYN Cookie？**

**SYN Cookie** 是一种网络安全技术，用于在处理 TCP **SYN Flood 攻击**时保护服务器不被耗尽资源。它通过修改 TCP 三次握手的实现，在不依赖服务器的连接队列的情况下完成连接状态的验证，减少资源消耗并抵御伪造的 SYN 请求。

---

### **SYN Cookie 的工作原理**

1. **传统三次握手的漏洞**：
   在传统的 TCP 三次握手中，服务器在收到客户端的 `SYN` 请求后，会在内存中分配一个半连接记录（称为 **SYN 队列**），然后返回一个 `SYN-ACK` 给客户端。  
   如果客户端发送 `ACK` 完成握手，则建立连接；否则，服务器需要保留半连接记录直到超时。
   - 攻击者通过发送大量伪造的 `SYN` 数据包，但不发送后续 `ACK`，导致服务器的 SYN 队列被耗尽（SYN Flood 攻击）。
   - 服务器内存资源被耗尽，无法处理新的合法连接。

2. **SYN Cookie 的解决方式**：
   SYN Cookie 通过改变服务器的行为来避免依赖 SYN 队列，具体步骤如下：
   - **收到 SYN**：
     服务器收到客户端的 `SYN` 包后，不立即分配资源，也不在内存中存储半连接记录。
   - **生成 Cookie**：
     服务器将连接状态信息（如源 IP、目标 IP、源端口、目标端口等）编码为一个特殊的序列号（称为 SYN Cookie），并将其作为 TCP 序列号发送给客户端。
   - **收到 ACK**：
     如果客户端发送 ACK 包，服务器根据收到的 ACK 中的序列号逆向计算并验证该序列号是否为合法的 SYN Cookie。如果合法，则创建连接。

   通过这种方式，只有真正完成三次握手的连接才会占用服务器的资源，从而大幅减少资源消耗。

---

### **SYN Cookie 的组成**

SYN Cookie 将必要的连接状态编码到序列号中。一个典型的 SYN Cookie 结构如下：
- **高位**：用来存储服务器生成的时间戳，用于区分新旧连接，防止重复包。
- **中间位**：存储客户端与服务器的连接信息（如源端口、目标端口、MSS 等）。
- **低位**：存储校验值，用于验证 SYN Cookie 的完整性。

这些信息被压缩到 32 位的 TCP 序列号中并发送给客户端。

---

### **SYN Cookie 的优点**

1. **防止 SYN Flood 攻击**：
   - 不依赖 SYN 队列，服务器不会因为大量伪造的 `SYN` 包而耗尽资源。
   
2. **轻量级实现**：
   - 只有在完成三次握手后才分配内存，极大地减少服务器资源消耗。

3. **兼容性**：
   - 不需要客户端修改或支持，完全兼容现有的 TCP 协议栈。

---

### **SYN Cookie 的缺点**

1. **功能受限**：
   - 无法支持 TCP 扩展功能（如窗口缩放、时间戳选项等），因为这些信息在 SYN Cookie 中无法编码或存储。
   
2. **安全性限制**：
   - SYN Cookie 的生成依赖哈希函数，攻击者可能通过暴力破解算法伪造合法的 SYN Cookie。
   
3. **性能开销**：
   - 尽管在多数情况下 SYN Cookie 提高了性能，但对每个 SYN 包都进行哈希计算仍然会增加服务器 CPU 开销。

---

### **如何启用 SYN Cookie**

在现代 Linux 系统中，可以通过以下命令启用 SYN Cookie：

```bash
# 启用 SYN Cookie
echo 1 > /proc/sys/net/ipv4/tcp_syncookies

# 查看当前 SYN Cookie 状态
cat /proc/sys/net/ipv4/tcp_syncookies
```

- **值解释**：
  - `0`：禁用 SYN Cookie。
  - `1`：在服务器 SYN 队列满时启用 SYN Cookie。
  - `2`：始终启用 SYN Cookie，无论队列是否满。

---

### **SYN Cookie 的典型场景**

1. **Web 服务器**：
   高流量的 Web 服务器（如 Nginx、Apache）容易遭受 SYN Flood 攻击，启用 SYN Cookie 可降低攻击风险。

2. **负载均衡器**：
   负载均衡器处于网络入口，通常会收到大量连接请求。通过启用 SYN Cookie，可过滤掉伪造的连接请求。

3. **物联网设备**：
   资源有限的 IoT 设备对 DoS 攻击更为脆弱，SYN Cookie 可以有效减少内存和 CPU 消耗。

---

### **SYN Cookie 和其他防护措施**

- **配合 SYN 队列限制**：
  配置合理的 `tcp_max_syn_backlog`，避免 SYN Cookie 频繁触发。

- **防火墙规则**：
  使用防火墙限制单个 IP 的连接速率，进一步减轻服务器负担。

- **结合 eBPF**：
  使用 eBPF/XDP 程序监控和限制异常的 SYN 请求流量，提供更精细的流量控制。

---

### **总结**

SYN Cookie 是一种高效的防御 SYN Flood 攻击的技术，通过避免在三次握手中分配服务器资源来保护服务器。尽管有一些功能限制，但在抵御大规模 SYN Flood 攻击中非常实用。结合其他网络安全措施，SYN Cookie 能显著提高服务器的抗攻击能力。


### **什么是 SYN 队列长度？**

**SYN 队列长度** 指的是 TCP 协议栈中用来存储未完成三次握手连接（即半连接）的队列的大小。这是 TCP 三次握手过程中服务器用于临时保存客户端连接请求状态的一个关键参数。

在 TCP 三次握手中：
1. 客户端向服务器发送 `SYN` 包。
2. 服务器回复 `SYN-ACK` 并将连接信息存入 **SYN 队列**。
3. 如果客户端返回 `ACK` 完成握手，服务器将从 SYN 队列移除该记录，并将连接移至已建立连接队列。

如果在客户端返回 `ACK` 之前，SYN 队列满了，服务器无法接收新的连接请求，表现为拒绝服务。

---

### **SYN 队列的作用**

- SYN 队列用于存储**等待完成三次握手的连接请求**。这是为每个新连接分配的临时状态信息。
- 每个记录包含如下信息：
  - 客户端的 IP 地址和端口号
  - 服务器的 IP 地址和端口号
  - 初始序列号（Sequence Number）
  - 其他 TCP 状态信息

---

### **如何确定 SYN 队列长度**

SYN 队列的长度可以通过操作系统参数来配置，以下是相关参数：

#### 在 Linux 系统中：
1. **`tcp_max_syn_backlog`**：
   - 定义了 SYN 队列的最大长度（即最大未完成握手连接数）。
   - 如果队列长度达到此值，新连接请求将被丢弃。
   - 默认值通常是 128 或更高，具体取决于内核版本和系统设置。

   查看当前设置：
   ```bash
   cat /proc/sys/net/ipv4/tcp_max_syn_backlog
   ```

   设置新的队列长度（如 1024）：
   ```bash
   echo 1024 > /proc/sys/net/ipv4/tcp_max_syn_backlog
   ```

2. **`somaxconn`**：
   - 定义了 socket 的全局最大连接队列长度，包括三次握手完成后的全连接队列和 SYN 队列。
   - 它限制了服务器可处理的总连接数。

   查看当前设置：
   ```bash
   cat /proc/sys/net/core/somaxconn
   ```

   设置新值：
   ```bash
   echo 1024 > /proc/sys/net/core/somaxconn
   ```

3. **`tcp_abort_on_overflow`**（可选）：
   - 当 SYN 队列满时，是否丢弃连接请求。
   - 取值为：
     - `0`（默认）：队列满时，新连接请求被放入等待队列或丢弃，但不会回复 RST。
     - `1`：队列满时直接丢弃请求，并向客户端返回 RST。

   设置为丢弃连接：
   ```bash
   echo 1 > /proc/sys/net/ipv4/tcp_abort_on_overflow
   ```

---

### **SYN 队列长度对服务器的影响**

1. **队列过短**：
   - 如果队列过短，在高并发或攻击场景下，SYN 队列很容易被填满。
   - 导致合法用户无法建立连接（拒绝服务）。

2. **队列过长**：
   - 如果队列过长，会占用更多的服务器内存资源。
   - 在某些情况下可能增加服务器的负载，特别是遭受 SYN Flood 攻击时。

---

### **SYN 队列长度与 SYN Flood 攻击**

1. **SYN Flood 攻击原理**：
   - 攻击者发送大量伪造的 `SYN` 包，并不返回 `ACK`。
   - 导致服务器的 SYN 队列被填满，从而拒绝新的连接请求。

2. **解决办法**：
   - **增加 SYN 队列长度**：临时增加队列长度以缓解攻击，但这只能作为短期解决方案。
   - **启用 SYN Cookie**：
     - SYN Cookie 技术可以在 SYN 队列满时避免分配资源，从而防止攻击。
     - 启用方法：
       ```bash
       echo 1 > /proc/sys/net/ipv4/tcp_syncookies
       ```
   - **使用防火墙规则**：
     - 限制单个 IP 的连接速率或未完成握手的连接数。
   - **负载均衡**：
     - 使用负载均衡器分散流量，将负载分布到多个服务器。

---

### **如何调优 SYN 队列长度**

在实际应用中，应该根据服务器的性能、连接需求以及并发量来设置合理的 SYN 队列长度。

1. **高并发场景**：
   - 对于高流量的 Web 服务器或负载均衡器，建议将 `tcp_max_syn_backlog` 设置为 1024 或更高。

   示例配置：
   ```bash
   echo 1024 > /proc/sys/net/ipv4/tcp_max_syn_backlog
   echo 2048 > /proc/sys/net/core/somaxconn
   ```

2. **遭受攻击时的优化**：
   - 开启 SYN Cookie，并增加 SYN 队列长度。
   - 示例：
     ```bash
     echo 1 > /proc/sys/net/ipv4/tcp_syncookies
     echo 2048 > /proc/sys/net/ipv4/tcp_max_syn_backlog
     ```

3. **低资源服务器**：
   - 在内存有限的服务器上，应适当限制 SYN 队列长度，避免过多未完成连接占用资源。

---

### **总结**

- **SYN 队列长度** 是服务器用来存储未完成三次握手连接的队列大小，其大小可以通过 `tcp_max_syn_backlog` 参数配置。
- 设置适当的 SYN 队列长度对于防止拒绝服务攻击（如 SYN Flood）和支持高并发连接非常重要。
- 配合 **SYN Cookie** 和 **防火墙规则** 可以有效防护 SYN Flood 攻击，同时保证服务器的性能和可用性。
==================================================================




==================================================================
ACK Flood
==================================================================





==================================================================
UDP Flood
==================================================================






==================================================================
nginx设置
http {
    server {
        listen 80;

        # 设置 TCP 超时时间，等待第三次 ACK 的时间
        proxy_connect_timeout 2s;

        # 防止长时间的空闲连接
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
    }
}
==================================================================





==================================================================
iptables设置
# 启用 SYN Cookie
echo 1 > /proc/sys/net/ipv4/tcp_syncookies

# 限制 SYN 队列的长度（可选，默认值较小）
echo 128 > /proc/sys/net/ipv4/tcp_max_syn_backlog

# 限制未完成连接的数量（半连接）
echo 1 > /proc/sys/net/ipv4/tcp_abort_on_overflow

方法三：使用防火墙规则限制 SYN Flood 攻击
可以通过防火墙（如 iptables 或 nftables）限制异常的 SYN 数据包。

检测并限制单个 IP 的 SYN 包速率，限制单个 IP 的半连接数为 10，超过后丢弃新连接。
iptables -A INPUT -p tcp --syn -m connlimit --connlimit-above 10 -j DROP

限制单个 IP 的半连接数为 10，超过后丢弃新连接。
设置每秒允许的 SYN 包速率：
iptables -A INPUT -p tcp --syn -m limit --limit 50/second --limit-burst 100 -j ACCEPT
iptables -A INPUT -p tcp --syn -j DROP
==================================================================

==================================================================
https flood

@Configuration
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
            .antMatchers("/api/**").authenticated() // 保护API接口
            .and()
            .addFilter(new RateLimitFilter()); // 自定义过滤器
    }
}

==================================================================